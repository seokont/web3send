import "dotenv/config";
import { ethers } from "ethers";

function getArg(flag) {
  const idx = process.argv.indexOf(flag);
  return idx !== -1 && process.argv[idx + 1]
    ? process.argv[idx + 1]
    : undefined;
}

function fail(msg, code = 1) {
  console.error("‚ùå", msg);
  process.exit(code);
}

const rpcUrl = getArg("--rpc") || process.env.RPC_URL;
const privateKey = getArg("--pk") || process.env.PRIVATE_KEY;
const to = getArg("--to");
const amountStr = getArg("--amount");
const tokenAddress = (
  getArg("--token") ||
  process.env.TOKEN_ADDRESS ||
  ""
).trim();

if (!rpcUrl) fail("–ù–µ –≤–∫–∞–∑–∞–Ω–æ RPC_URL (--rpc –∞–±–æ .env RPC_URL)");
if (!privateKey) fail("–ù–µ –≤–∫–∞–∑–∞–Ω–æ PRIVATE_KEY (--pk –∞–±–æ .env PRIVATE_KEY)");
if (!to) fail("–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∞–¥—Ä–µ—Å—É –æ–¥–µ—Ä–∂—É–≤–∞—á–∞ (--to)");
if (!amountStr) fail("–ù–µ –≤–∫–∞–∑–∞–Ω–æ —Å—É–º—É –ø–µ—Ä–µ–∫–∞–∑—É (--amount)");

if (!ethers.isAddress(to)) fail(`–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∞–¥—Ä–µ—Å–∞ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞: ${to}`);

const ERC20_MIN_ABI = [
  "function decimals() view returns (uint8)",
  "function symbol() view returns (string)",
  "function transfer(address to, uint256 amount) returns (bool)",
];

(async () => {
  try {
    const provider = new ethers.JsonRpcProvider(rpcUrl);
    const wallet = new ethers.Wallet(privateKey, provider);
    const from = await wallet.getAddress();

    console.log("üîó RPC:", rpcUrl);
    console.log("üë§ –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫:", from);
    console.log("üì• –û–¥–µ—Ä–∂—É–≤–∞—á:", to);
    console.log("üíµ –°—É–º–∞:", amountStr, tokenAddress ? "(ERC-20)" : "(native)");

    let tx;

    if (tokenAddress) {
      if (!ethers.isAddress(tokenAddress)) {
        fail(`–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞: ${tokenAddress}`);
      }
      const erc20 = new ethers.Contract(tokenAddress, ERC20_MIN_ABI, wallet);
      const [dec, sym] = await Promise.all([
        erc20.decimals(),
        (async () => {
          try {
            return await erc20.symbol();
          } catch {
            return "";
          }
        })(),
      ]);
      const value = ethers.parseUnits(amountStr, dec);
      console.log(
        `üßæ –¢–æ–∫–µ–Ω: ${tokenAddress} ${sym ? `(${sym})` : ""}, decimals=${dec}`
      );

      tx = await erc20.transfer(to, value);
      console.log("üöÄ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ERC-20 transfer. TX Hash:", tx.hash);
    } else {
      const value = ethers.parseEther(amountStr);
      tx = await wallet.sendTransaction({ to, value });
      console.log("üöÄ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞—Ç–∏–≤–Ω–∏–π –ø–µ—Ä–µ–∫–∞–∑. TX Hash:", tx.hash);
    }

    const receipt = await tx.wait();
    const statusText = receipt.status === 1 ? "‚úÖ –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–û" : "‚ö†Ô∏è –ù–ï–í–î–ê–õ–û";
    console.log(
      `${statusText}: –±–ª–æ–∫ #${receipt.blockNumber}, –≥–∞–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ ${receipt.gasUsed}`
    );
  } catch (err) {
    const msg =
      (err && (err.info?.error?.message || err.shortMessage || err.message)) ||
      String(err);
    console.error("üí• –ü–æ–º–∏–ª–∫–∞:", msg);

    if (/insufficient funds/i.test(msg)) {
      console.error("üëâ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è —Å—É–º–∏ + –∫–æ–º—ñ—Å—ñ—ó gas.");
    } else if (/nonce/i.test(msg)) {
      console.error(
        "üëâ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ —è–≤–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å nonce, —è–∫—â–æ —É –≤–∞—Å –ø–∞—Ä–∞–ª–µ–ª—å–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó."
      );
    } else if (/replacement|underpriced|fee/i.test(msg)) {
      console.error(
        "üëâ –°–ø—Ä–æ–±—É–π—Ç–µ –∑–±—ñ–ª—å—à–∏—Ç–∏ –∫–æ–º—ñ—Å—ñ—é –∞–±–æ –ø–æ—á–µ–∫–∞–π—Ç–µ –º–µ–Ω—à–æ–≥–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ—Ä–µ–∂—ñ."
      );
    } else if (/invalid address/i.test(msg)) {
      console.error("üëâ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∞–¥—Ä–µ—Å–∏ (--to / --token).");
    }

    process.exit(1);
  }
})();
